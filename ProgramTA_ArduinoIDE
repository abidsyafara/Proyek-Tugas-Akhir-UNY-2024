//Program Arduino IDE Tugas Akhir UNY 2024
//Abid Syafara Muhibuddin
//20507334066
//D4 Teknik Elektronika

#include <Arduino.h>
#if defined(ESP32)
  #include <WiFi.h>
#elif defined(ESP32)
  #include <ESP32WiFi.h>
#endif
#include <Firebase_ESP_Client.h>
#include <DHT.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <UniversalTelegramBot.h>
#include <WiFiClientSecure.h>
#include <HTTPClient.h>

// Provide the token generation process info.
#include "addons/TokenHelper.h"
// Provide the RTDB payload printing info and other helper functions.
#include "addons/RTDBHelper.h"

// Insert your network credentials
#define WIFI_SSID "SYABAN_97"
#define WIFI_PASSWORD "****"

// Insert Firebase project API Key
#define API_KEY "****"

// Insert RTDB URL
#define DATABASE_URL "****"

// Define Firebase Data object
FirebaseData fbdo;

FirebaseAuth auth;
FirebaseConfig config;

// DHT22 and MQ6 Pin Configuration
#define DHTPIN 4
#define DHTTYPE DHT22
int mq6Pin = 36;  // Pin for MQ6 sensor

DHT dht(DHTPIN, DHTTYPE);

// Buzzer and LED Pin Configuration
#define BUZZER_PIN 18
#define RED_LED_PIN 14
#define YELLOW_LED_PIN 12
#define GREEN_LED_PIN 27

// LCD Configuration
LiquidCrystal_I2C lcd(0x27, 16, 2);

// Telegram Bot Configuration
#define BOT_TOKEN "****"
#define CHAT_ID "****"

WiFiClientSecure client;
UniversalTelegramBot bot(BOT_TOKEN, client);

// Twilio Configuration
String accountSid = "****";
String authToken = "****";
String fromNumber = "****";
String toNumber = "****";

// Variables for previous status to prevent duplicate notifications
String previousStatus = "";
bool callInProgress = false;
unsigned long lastCallAttemptTime = 0;
const unsigned long callRetryDelay = 30000; // 30 seconds

// Moving Average Filter Configuration
#define NUM_SAMPLES 5  // Number of samples for moving average

float temperatureSamples[NUM_SAMPLES] = {0};
float humiditySamples[NUM_SAMPLES] = {0};
int gasSamples[NUM_SAMPLES] = {0};

int sampleIndex = 0;

void updateMovingAverage(float &temperatureAvg, float &humidityAvg, int &gasAvg) {
  // Add new sensor readings to the arrays
  temperatureSamples[sampleIndex] = dht.readTemperature();
  humiditySamples[sampleIndex] = dht.readHumidity();
  gasSamples[sampleIndex] = map(analogRead(mq6Pin), 0, 4095, 0, 1023);

  // Calculate the average of the samples
  float temperatureSum = 0;
  float humiditySum = 0;
  int gasSum = 0;

  for (int i = 0; i < NUM_SAMPLES; i++) {
    temperatureSum += temperatureSamples[i];
    humiditySum += humiditySamples[i];
    gasSum += gasSamples[i];
  }

  temperatureAvg = temperatureSum / NUM_SAMPLES;
  humidityAvg = humiditySum / NUM_SAMPLES;
  gasAvg = gasSum / NUM_SAMPLES;

  // Increment sampleIndex and wrap around if necessary
  sampleIndex = (sampleIndex + 1) % NUM_SAMPLES;

  // Print the last 5 samples and the average to the serial monitor
  Serial.println("Last 5 Samples:");
  for (int i = 0; i < NUM_SAMPLES; i++) {
    Serial.print("Suhu: ");
    Serial.print(temperatureSamples[i]);
    Serial.print(" C, Kelembaban: ");
    Serial.print(humiditySamples[i]);
    Serial.print(" %, Gas: ");
    Serial.println(gasSamples[i]);
  }
  Serial.print("Rata-rata Suhu: ");
  Serial.print(temperatureAvg);
  Serial.print(" C, Rata-rata Kelembaban: ");
  Serial.print(humidityAvg);
  Serial.print(" %, Rata-rata Gas: ");
  Serial.println(gasAvg);
}

// Function to handle incoming Telegram messages
void handleNewMessages(int numNewMessages) {
  for (int i = 0; i < numNewMessages; i++) {
    String chat_id = String(bot.messages[i].chat_id);
    String text = bot.messages[i].text;

    if (text == "/status") {
      String statusMessage = "";
      statusMessage += "Status: " + previousStatus + "\n";
      statusMessage += "Suhu: " + String(dht.readTemperature()) + " °C\n";
      statusMessage += "Kelembaban: " + String(dht.readHumidity()) + " %\n";
      statusMessage += "Nilai Gas: " + String(map(analogRead(mq6Pin), 0, 4095, 0, 1023)) + "\n";
      
      bot.sendMessage(chat_id, statusMessage, "");
    } else {
      bot.sendMessage(chat_id, "Perintah tidak dikenal. Gunakan /status untuk memeriksa status dan data sensor.", "");
    }
  }
}

void makeTwilioCall() {
  HTTPClient http;
  
  String url = "https://api.twilio.com/2010-04-01/Accounts/";
  url += accountSid;
  url += "/Calls.json";
  
  String payload = "To=" + toNumber + "&From=" + fromNumber + "&Url=http://demo.twilio.com/docs/voice.xml";
  
  http.begin(url.c_str());
  http.setAuthorization(accountSid.c_str(), authToken.c_str());
  http.addHeader("Content-Type", "application/x-www-form-urlencoded");
  
  int httpResponseCode = http.POST(payload);
  
  if (httpResponseCode > 0) {
    String response = http.getString();
    Serial.println(httpResponseCode);
    Serial.println(response);
    callInProgress = true; // Mark call as in progress
  } else {
    Serial.println("Error on HTTP request");
  }
  
  http.end();
}

void sendTelegramNotification(String status) {
  String message = "Status: " + status + "\n";
  message += "Suhu: " + String(dht.readTemperature()) + " °C\n";
  message += "Kelembaban: " + String(dht.readHumidity()) + " %\n";
  message += "Nilai Gas: " + String(map(analogRead(mq6Pin), 0, 4095, 0, 1023)) + "\n";
  
  bot.sendMessage(CHAT_ID, message, "");
}

void setup() {
  Serial.begin(115200);

  // Initialize sensors and LCD
  dht.begin();
  lcd.begin();
  lcd.backlight();

  // Display initialization messages on the LCD
  lcd.setCursor(0, 0);
  lcd.print("Inisialisasi");
  lcd.setCursor(0, 1);
  lcd.print("Sensor...");

   // Delay to let the LCD messages display for a short period
  delay(2000);

  // Clear the LCD before starting to display sensor data
  lcd.clear();

  // Initialize Buzzer and LEDs
  pinMode(BUZZER_PIN, OUTPUT);
  pinMode(RED_LED_PIN, OUTPUT);
  pinMode(YELLOW_LED_PIN, OUTPUT);
  pinMode(GREEN_LED_PIN, OUTPUT);

  // Initialize Wi-Fi
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Connecting to Wi-Fi");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(300);
  }
  Serial.println();
  Serial.print("Connected with IP: ");
  Serial.println(WiFi.localIP());

  client.setInsecure();

  // Firebase configuration
  config.api_key = API_KEY;
  config.database_url = DATABASE_URL;

  if (Firebase.signUp(&config, &auth, "", "")) {
    Serial.println("Firebase authentication successful.");
  } else {
    Serial.printf("Firebase sign up error: %s\n", config.signer.signupError.message.c_str());
  }

  config.token_status_callback = tokenStatusCallback;
  Firebase.begin(&config, &auth);
  Firebase.reconnectWiFi(true);

  // Delay to let the LCD messages display for a short period
  delay(2000);
}

void loop() {
  float temperatureAvg = 0;
  float humidityAvg = 0;
  int gasAvg = 0;

  // Update moving average and calculate the average values
  updateMovingAverage(temperatureAvg, humidityAvg, gasAvg);

  // Print sensor data and moving averages to the serial monitor
  Serial.println("Sensor Data:");
  Serial.print("Suhu: ");
  Serial.print(dht.readTemperature());
  Serial.println(" C");
  Serial.print("Kelembaban: ");
  Serial.print(dht.readHumidity());
  Serial.println(" %");
  Serial.print("Gas LPG: ");
  Serial.println(map(analogRead(mq6Pin), 0, 4095, 0, 1023));

  // Evaluate status based on averaged sensor values
  String status;
  if (gasAvg <= 200 && temperatureAvg <= 32) {
    status = "AMAN";
    digitalWrite(GREEN_LED_PIN, HIGH);
    digitalWrite(YELLOW_LED_PIN, LOW);
    digitalWrite(RED_LED_PIN, LOW);
    digitalWrite(BUZZER_PIN, LOW);
    
  } else if (gasAvg > 200 && temperatureAvg <= 32) {
    status = "WASPADA";
    digitalWrite(GREEN_LED_PIN, LOW);
    digitalWrite(YELLOW_LED_PIN, HIGH);
    digitalWrite(RED_LED_PIN, LOW);
    digitalWrite(BUZZER_PIN, HIGH); // Beep for WASPADA
  } else if (temperatureAvg > 32) {
    status = "BAHAYA";
    digitalWrite(GREEN_LED_PIN, LOW);
    digitalWrite(YELLOW_LED_PIN, LOW);
    digitalWrite(RED_LED_PIN, HIGH);
    digitalWrite(BUZZER_PIN, HIGH); // Continuous high sound for BAHAYA
  }

  // Update LCD display
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("LPG: ");
  lcd.print(gasAvg);
  lcd.setCursor(0, 1);
  lcd.print("Status: ");
  lcd.print(status);

  // Send data to Firebase
  if (Firebase.RTDB.setFloat(&fbdo, "DATA_SENSOR/SUHU", temperatureAvg)) {
    Serial.println("Temperature average sent to Firebase.");
  } else {
    Serial.print("Failed to send temperature average: ");
    Serial.println(fbdo.errorReason());
  }

  if (Firebase.RTDB.setFloat(&fbdo, "DATA_SENSOR/KELEMBABAN", humidityAvg)) {
    Serial.println("Humidity average sent to Firebase.");
  } else {
    Serial.print("Failed to send humidity average: ");
    Serial.println(fbdo.errorReason());
  }

  if (Firebase.RTDB.setInt(&fbdo, "DATA_SENSOR/GAS", gasAvg)) {
    Serial.println("Gas average sent to Firebase.");
  } else {
    Serial.print("Failed to send gas average: ");
    Serial.println(fbdo.errorReason());
  }

  if (Firebase.RTDB.setString(&fbdo, "DATA_SENSOR/STATUS", status)) {
    Serial.println("Status sent to Firebase.");
  } else {
    Serial.print("Failed to send status: ");
    Serial.println(fbdo.errorReason());
  }

  // Send notifications based on status
  if (status != previousStatus) {
    if (status == "BAHAYA") {
      sendTelegramNotification(status);

      if (!callInProgress || millis() - lastCallAttemptTime > callRetryDelay) {
        makeTwilioCall();
        lastCallAttemptTime = millis();
      }
    } else if (status == "WASPADA") {
      sendTelegramNotification(status);
    }

    previousStatus = status;
  }

  // Handle Telegram messages
  int numNewMessages = bot.getUpdates(bot.last_message_received + 1);
  handleNewMessages(numNewMessages);

  delay(1000); // Delay before next loop iteration
}
